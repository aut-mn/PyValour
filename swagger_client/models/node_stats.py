# coding: utf-8

"""
    Valour API

    The official Valour API  # noqa: E501

    OpenAPI spec version: v1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NodeStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'connection_count': 'int',
        'connection_group_count': 'int',
        'planet_count': 'int',
        'active_member_count': 'int'
    }

    attribute_map = {
        'name': 'name',
        'connection_count': 'connectionCount',
        'connection_group_count': 'connectionGroupCount',
        'planet_count': 'planetCount',
        'active_member_count': 'activeMemberCount'
    }

    def __init__(self, name=None, connection_count=None, connection_group_count=None, planet_count=None, active_member_count=None):  # noqa: E501
        """NodeStats - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._connection_count = None
        self._connection_group_count = None
        self._planet_count = None
        self._active_member_count = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if connection_count is not None:
            self.connection_count = connection_count
        if connection_group_count is not None:
            self.connection_group_count = connection_group_count
        if planet_count is not None:
            self.planet_count = planet_count
        if active_member_count is not None:
            self.active_member_count = active_member_count

    @property
    def name(self):
        """Gets the name of this NodeStats.  # noqa: E501


        :return: The name of this NodeStats.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NodeStats.


        :param name: The name of this NodeStats.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def connection_count(self):
        """Gets the connection_count of this NodeStats.  # noqa: E501


        :return: The connection_count of this NodeStats.  # noqa: E501
        :rtype: int
        """
        return self._connection_count

    @connection_count.setter
    def connection_count(self, connection_count):
        """Sets the connection_count of this NodeStats.


        :param connection_count: The connection_count of this NodeStats.  # noqa: E501
        :type: int
        """

        self._connection_count = connection_count

    @property
    def connection_group_count(self):
        """Gets the connection_group_count of this NodeStats.  # noqa: E501


        :return: The connection_group_count of this NodeStats.  # noqa: E501
        :rtype: int
        """
        return self._connection_group_count

    @connection_group_count.setter
    def connection_group_count(self, connection_group_count):
        """Sets the connection_group_count of this NodeStats.


        :param connection_group_count: The connection_group_count of this NodeStats.  # noqa: E501
        :type: int
        """

        self._connection_group_count = connection_group_count

    @property
    def planet_count(self):
        """Gets the planet_count of this NodeStats.  # noqa: E501


        :return: The planet_count of this NodeStats.  # noqa: E501
        :rtype: int
        """
        return self._planet_count

    @planet_count.setter
    def planet_count(self, planet_count):
        """Sets the planet_count of this NodeStats.


        :param planet_count: The planet_count of this NodeStats.  # noqa: E501
        :type: int
        """

        self._planet_count = planet_count

    @property
    def active_member_count(self):
        """Gets the active_member_count of this NodeStats.  # noqa: E501


        :return: The active_member_count of this NodeStats.  # noqa: E501
        :rtype: int
        """
        return self._active_member_count

    @active_member_count.setter
    def active_member_count(self, active_member_count):
        """Sets the active_member_count of this NodeStats.


        :param active_member_count: The active_member_count of this NodeStats.  # noqa: E501
        :type: int
        """

        self._active_member_count = active_member_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NodeStats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
