# coding: utf-8

"""
    Valour API

    The official Valour API  # noqa: E501

    OpenAPI spec version: v1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PlanetInvite(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'planet_id': 'int',
        'code': 'str',
        'issuer_id': 'int',
        'time_created': 'datetime',
        'time_expires': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'planet_id': 'planetId',
        'code': 'code',
        'issuer_id': 'issuerId',
        'time_created': 'timeCreated',
        'time_expires': 'timeExpires'
    }

    def __init__(self, id=None, planet_id=None, code=None, issuer_id=None, time_created=None, time_expires=None):  # noqa: E501
        """PlanetInvite - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._planet_id = None
        self._code = None
        self._issuer_id = None
        self._time_created = None
        self._time_expires = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if planet_id is not None:
            self.planet_id = planet_id
        if code is not None:
            self.code = code
        if issuer_id is not None:
            self.issuer_id = issuer_id
        if time_created is not None:
            self.time_created = time_created
        if time_expires is not None:
            self.time_expires = time_expires

    @property
    def id(self):
        """Gets the id of this PlanetInvite.  # noqa: E501


        :return: The id of this PlanetInvite.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlanetInvite.


        :param id: The id of this PlanetInvite.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def planet_id(self):
        """Gets the planet_id of this PlanetInvite.  # noqa: E501


        :return: The planet_id of this PlanetInvite.  # noqa: E501
        :rtype: int
        """
        return self._planet_id

    @planet_id.setter
    def planet_id(self, planet_id):
        """Sets the planet_id of this PlanetInvite.


        :param planet_id: The planet_id of this PlanetInvite.  # noqa: E501
        :type: int
        """

        self._planet_id = planet_id

    @property
    def code(self):
        """Gets the code of this PlanetInvite.  # noqa: E501


        :return: The code of this PlanetInvite.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this PlanetInvite.


        :param code: The code of this PlanetInvite.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def issuer_id(self):
        """Gets the issuer_id of this PlanetInvite.  # noqa: E501


        :return: The issuer_id of this PlanetInvite.  # noqa: E501
        :rtype: int
        """
        return self._issuer_id

    @issuer_id.setter
    def issuer_id(self, issuer_id):
        """Sets the issuer_id of this PlanetInvite.


        :param issuer_id: The issuer_id of this PlanetInvite.  # noqa: E501
        :type: int
        """

        self._issuer_id = issuer_id

    @property
    def time_created(self):
        """Gets the time_created of this PlanetInvite.  # noqa: E501


        :return: The time_created of this PlanetInvite.  # noqa: E501
        :rtype: datetime
        """
        return self._time_created

    @time_created.setter
    def time_created(self, time_created):
        """Sets the time_created of this PlanetInvite.


        :param time_created: The time_created of this PlanetInvite.  # noqa: E501
        :type: datetime
        """

        self._time_created = time_created

    @property
    def time_expires(self):
        """Gets the time_expires of this PlanetInvite.  # noqa: E501


        :return: The time_expires of this PlanetInvite.  # noqa: E501
        :rtype: datetime
        """
        return self._time_expires

    @time_expires.setter
    def time_expires(self, time_expires):
        """Sets the time_expires of this PlanetInvite.


        :param time_expires: The time_expires of this PlanetInvite.  # noqa: E501
        :type: datetime
        """

        self._time_expires = time_expires

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlanetInvite, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlanetInvite):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
