# coding: utf-8

"""
    Valour API

    The official Valour API  # noqa: E501

    OpenAPI spec version: v1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RegisterUserRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'username': 'str',
        'email': 'str',
        'password': 'str',
        'referrer': 'str',
        'date_of_birth': 'datetime',
        'locality': 'Locality',
        'invite_code': 'str',
        'source': 'str'
    }

    attribute_map = {
        'username': 'username',
        'email': 'email',
        'password': 'password',
        'referrer': 'referrer',
        'date_of_birth': 'dateOfBirth',
        'locality': 'locality',
        'invite_code': 'inviteCode',
        'source': 'source'
    }

    def __init__(self, username=None, email=None, password=None, referrer=None, date_of_birth=None, locality=None, invite_code=None, source=None):  # noqa: E501
        """RegisterUserRequest - a model defined in Swagger"""  # noqa: E501
        self._username = None
        self._email = None
        self._password = None
        self._referrer = None
        self._date_of_birth = None
        self._locality = None
        self._invite_code = None
        self._source = None
        self.discriminator = None
        if username is not None:
            self.username = username
        if email is not None:
            self.email = email
        if password is not None:
            self.password = password
        if referrer is not None:
            self.referrer = referrer
        if date_of_birth is not None:
            self.date_of_birth = date_of_birth
        if locality is not None:
            self.locality = locality
        if invite_code is not None:
            self.invite_code = invite_code
        if source is not None:
            self.source = source

    @property
    def username(self):
        """Gets the username of this RegisterUserRequest.  # noqa: E501


        :return: The username of this RegisterUserRequest.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this RegisterUserRequest.


        :param username: The username of this RegisterUserRequest.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def email(self):
        """Gets the email of this RegisterUserRequest.  # noqa: E501


        :return: The email of this RegisterUserRequest.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this RegisterUserRequest.


        :param email: The email of this RegisterUserRequest.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def password(self):
        """Gets the password of this RegisterUserRequest.  # noqa: E501


        :return: The password of this RegisterUserRequest.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this RegisterUserRequest.


        :param password: The password of this RegisterUserRequest.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def referrer(self):
        """Gets the referrer of this RegisterUserRequest.  # noqa: E501


        :return: The referrer of this RegisterUserRequest.  # noqa: E501
        :rtype: str
        """
        return self._referrer

    @referrer.setter
    def referrer(self, referrer):
        """Sets the referrer of this RegisterUserRequest.


        :param referrer: The referrer of this RegisterUserRequest.  # noqa: E501
        :type: str
        """

        self._referrer = referrer

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this RegisterUserRequest.  # noqa: E501


        :return: The date_of_birth of this RegisterUserRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this RegisterUserRequest.


        :param date_of_birth: The date_of_birth of this RegisterUserRequest.  # noqa: E501
        :type: datetime
        """

        self._date_of_birth = date_of_birth

    @property
    def locality(self):
        """Gets the locality of this RegisterUserRequest.  # noqa: E501


        :return: The locality of this RegisterUserRequest.  # noqa: E501
        :rtype: Locality
        """
        return self._locality

    @locality.setter
    def locality(self, locality):
        """Sets the locality of this RegisterUserRequest.


        :param locality: The locality of this RegisterUserRequest.  # noqa: E501
        :type: Locality
        """

        self._locality = locality

    @property
    def invite_code(self):
        """Gets the invite_code of this RegisterUserRequest.  # noqa: E501


        :return: The invite_code of this RegisterUserRequest.  # noqa: E501
        :rtype: str
        """
        return self._invite_code

    @invite_code.setter
    def invite_code(self, invite_code):
        """Sets the invite_code of this RegisterUserRequest.


        :param invite_code: The invite_code of this RegisterUserRequest.  # noqa: E501
        :type: str
        """

        self._invite_code = invite_code

    @property
    def source(self):
        """Gets the source of this RegisterUserRequest.  # noqa: E501


        :return: The source of this RegisterUserRequest.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this RegisterUserRequest.


        :param source: The source of this RegisterUserRequest.  # noqa: E501
        :type: str
        """

        self._source = source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RegisterUserRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RegisterUserRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
