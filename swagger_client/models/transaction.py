# coding: utf-8

"""
    Valour API

    The official Valour API  # noqa: E501

    OpenAPI spec version: v1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Transaction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'planet_id': 'int',
        'user_from_id': 'int',
        'account_from_id': 'int',
        'user_to_id': 'int',
        'account_to_id': 'int',
        'time_stamp': 'datetime',
        'description': 'str',
        'amount': 'float',
        'data': 'str',
        'fingerprint': 'str',
        'forced_by': 'int'
    }

    attribute_map = {
        'id': 'id',
        'planet_id': 'planetId',
        'user_from_id': 'userFromId',
        'account_from_id': 'accountFromId',
        'user_to_id': 'userToId',
        'account_to_id': 'accountToId',
        'time_stamp': 'timeStamp',
        'description': 'description',
        'amount': 'amount',
        'data': 'data',
        'fingerprint': 'fingerprint',
        'forced_by': 'forcedBy'
    }

    def __init__(self, id=None, planet_id=None, user_from_id=None, account_from_id=None, user_to_id=None, account_to_id=None, time_stamp=None, description=None, amount=None, data=None, fingerprint=None, forced_by=None):  # noqa: E501
        """Transaction - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._planet_id = None
        self._user_from_id = None
        self._account_from_id = None
        self._user_to_id = None
        self._account_to_id = None
        self._time_stamp = None
        self._description = None
        self._amount = None
        self._data = None
        self._fingerprint = None
        self._forced_by = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if planet_id is not None:
            self.planet_id = planet_id
        if user_from_id is not None:
            self.user_from_id = user_from_id
        if account_from_id is not None:
            self.account_from_id = account_from_id
        if user_to_id is not None:
            self.user_to_id = user_to_id
        if account_to_id is not None:
            self.account_to_id = account_to_id
        if time_stamp is not None:
            self.time_stamp = time_stamp
        if description is not None:
            self.description = description
        if amount is not None:
            self.amount = amount
        if data is not None:
            self.data = data
        if fingerprint is not None:
            self.fingerprint = fingerprint
        if forced_by is not None:
            self.forced_by = forced_by

    @property
    def id(self):
        """Gets the id of this Transaction.  # noqa: E501


        :return: The id of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Transaction.


        :param id: The id of this Transaction.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def planet_id(self):
        """Gets the planet_id of this Transaction.  # noqa: E501


        :return: The planet_id of this Transaction.  # noqa: E501
        :rtype: int
        """
        return self._planet_id

    @planet_id.setter
    def planet_id(self, planet_id):
        """Sets the planet_id of this Transaction.


        :param planet_id: The planet_id of this Transaction.  # noqa: E501
        :type: int
        """

        self._planet_id = planet_id

    @property
    def user_from_id(self):
        """Gets the user_from_id of this Transaction.  # noqa: E501


        :return: The user_from_id of this Transaction.  # noqa: E501
        :rtype: int
        """
        return self._user_from_id

    @user_from_id.setter
    def user_from_id(self, user_from_id):
        """Sets the user_from_id of this Transaction.


        :param user_from_id: The user_from_id of this Transaction.  # noqa: E501
        :type: int
        """

        self._user_from_id = user_from_id

    @property
    def account_from_id(self):
        """Gets the account_from_id of this Transaction.  # noqa: E501


        :return: The account_from_id of this Transaction.  # noqa: E501
        :rtype: int
        """
        return self._account_from_id

    @account_from_id.setter
    def account_from_id(self, account_from_id):
        """Sets the account_from_id of this Transaction.


        :param account_from_id: The account_from_id of this Transaction.  # noqa: E501
        :type: int
        """

        self._account_from_id = account_from_id

    @property
    def user_to_id(self):
        """Gets the user_to_id of this Transaction.  # noqa: E501


        :return: The user_to_id of this Transaction.  # noqa: E501
        :rtype: int
        """
        return self._user_to_id

    @user_to_id.setter
    def user_to_id(self, user_to_id):
        """Sets the user_to_id of this Transaction.


        :param user_to_id: The user_to_id of this Transaction.  # noqa: E501
        :type: int
        """

        self._user_to_id = user_to_id

    @property
    def account_to_id(self):
        """Gets the account_to_id of this Transaction.  # noqa: E501


        :return: The account_to_id of this Transaction.  # noqa: E501
        :rtype: int
        """
        return self._account_to_id

    @account_to_id.setter
    def account_to_id(self, account_to_id):
        """Sets the account_to_id of this Transaction.


        :param account_to_id: The account_to_id of this Transaction.  # noqa: E501
        :type: int
        """

        self._account_to_id = account_to_id

    @property
    def time_stamp(self):
        """Gets the time_stamp of this Transaction.  # noqa: E501


        :return: The time_stamp of this Transaction.  # noqa: E501
        :rtype: datetime
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this Transaction.


        :param time_stamp: The time_stamp of this Transaction.  # noqa: E501
        :type: datetime
        """

        self._time_stamp = time_stamp

    @property
    def description(self):
        """Gets the description of this Transaction.  # noqa: E501


        :return: The description of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Transaction.


        :param description: The description of this Transaction.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def amount(self):
        """Gets the amount of this Transaction.  # noqa: E501


        :return: The amount of this Transaction.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Transaction.


        :param amount: The amount of this Transaction.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def data(self):
        """Gets the data of this Transaction.  # noqa: E501


        :return: The data of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Transaction.


        :param data: The data of this Transaction.  # noqa: E501
        :type: str
        """

        self._data = data

    @property
    def fingerprint(self):
        """Gets the fingerprint of this Transaction.  # noqa: E501


        :return: The fingerprint of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this Transaction.


        :param fingerprint: The fingerprint of this Transaction.  # noqa: E501
        :type: str
        """

        self._fingerprint = fingerprint

    @property
    def forced_by(self):
        """Gets the forced_by of this Transaction.  # noqa: E501


        :return: The forced_by of this Transaction.  # noqa: E501
        :rtype: int
        """
        return self._forced_by

    @forced_by.setter
    def forced_by(self, forced_by):
        """Sets the forced_by of this Transaction.


        :param forced_by: The forced_by of this Transaction.  # noqa: E501
        :type: int
        """

        self._forced_by = forced_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Transaction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Transaction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
