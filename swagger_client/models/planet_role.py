# coding: utf-8

"""
    Valour API

    The official Valour API  # noqa: E501

    OpenAPI spec version: v1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PlanetRole(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'is_admin': 'bool',
        'planet_id': 'int',
        'position': 'int',
        'is_default': 'bool',
        'permissions': 'int',
        'chat_permissions': 'int',
        'category_permissions': 'int',
        'voice_permissions': 'int',
        'color': 'str',
        'bold': 'bool',
        'italics': 'bool',
        'name': 'str',
        'anyone_can_mention': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'is_admin': 'isAdmin',
        'planet_id': 'planetId',
        'position': 'position',
        'is_default': 'isDefault',
        'permissions': 'permissions',
        'chat_permissions': 'chatPermissions',
        'category_permissions': 'categoryPermissions',
        'voice_permissions': 'voicePermissions',
        'color': 'color',
        'bold': 'bold',
        'italics': 'italics',
        'name': 'name',
        'anyone_can_mention': 'anyoneCanMention'
    }

    def __init__(self, id=None, is_admin=None, planet_id=None, position=None, is_default=None, permissions=None, chat_permissions=None, category_permissions=None, voice_permissions=None, color=None, bold=None, italics=None, name=None, anyone_can_mention=None):  # noqa: E501
        """PlanetRole - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._is_admin = None
        self._planet_id = None
        self._position = None
        self._is_default = None
        self._permissions = None
        self._chat_permissions = None
        self._category_permissions = None
        self._voice_permissions = None
        self._color = None
        self._bold = None
        self._italics = None
        self._name = None
        self._anyone_can_mention = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if is_admin is not None:
            self.is_admin = is_admin
        if planet_id is not None:
            self.planet_id = planet_id
        if position is not None:
            self.position = position
        if is_default is not None:
            self.is_default = is_default
        if permissions is not None:
            self.permissions = permissions
        if chat_permissions is not None:
            self.chat_permissions = chat_permissions
        if category_permissions is not None:
            self.category_permissions = category_permissions
        if voice_permissions is not None:
            self.voice_permissions = voice_permissions
        if color is not None:
            self.color = color
        if bold is not None:
            self.bold = bold
        if italics is not None:
            self.italics = italics
        if name is not None:
            self.name = name
        if anyone_can_mention is not None:
            self.anyone_can_mention = anyone_can_mention

    @property
    def id(self):
        """Gets the id of this PlanetRole.  # noqa: E501


        :return: The id of this PlanetRole.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlanetRole.


        :param id: The id of this PlanetRole.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def is_admin(self):
        """Gets the is_admin of this PlanetRole.  # noqa: E501


        :return: The is_admin of this PlanetRole.  # noqa: E501
        :rtype: bool
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin):
        """Sets the is_admin of this PlanetRole.


        :param is_admin: The is_admin of this PlanetRole.  # noqa: E501
        :type: bool
        """

        self._is_admin = is_admin

    @property
    def planet_id(self):
        """Gets the planet_id of this PlanetRole.  # noqa: E501


        :return: The planet_id of this PlanetRole.  # noqa: E501
        :rtype: int
        """
        return self._planet_id

    @planet_id.setter
    def planet_id(self, planet_id):
        """Sets the planet_id of this PlanetRole.


        :param planet_id: The planet_id of this PlanetRole.  # noqa: E501
        :type: int
        """

        self._planet_id = planet_id

    @property
    def position(self):
        """Gets the position of this PlanetRole.  # noqa: E501


        :return: The position of this PlanetRole.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this PlanetRole.


        :param position: The position of this PlanetRole.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def is_default(self):
        """Gets the is_default of this PlanetRole.  # noqa: E501


        :return: The is_default of this PlanetRole.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this PlanetRole.


        :param is_default: The is_default of this PlanetRole.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def permissions(self):
        """Gets the permissions of this PlanetRole.  # noqa: E501


        :return: The permissions of this PlanetRole.  # noqa: E501
        :rtype: int
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this PlanetRole.


        :param permissions: The permissions of this PlanetRole.  # noqa: E501
        :type: int
        """

        self._permissions = permissions

    @property
    def chat_permissions(self):
        """Gets the chat_permissions of this PlanetRole.  # noqa: E501


        :return: The chat_permissions of this PlanetRole.  # noqa: E501
        :rtype: int
        """
        return self._chat_permissions

    @chat_permissions.setter
    def chat_permissions(self, chat_permissions):
        """Sets the chat_permissions of this PlanetRole.


        :param chat_permissions: The chat_permissions of this PlanetRole.  # noqa: E501
        :type: int
        """

        self._chat_permissions = chat_permissions

    @property
    def category_permissions(self):
        """Gets the category_permissions of this PlanetRole.  # noqa: E501


        :return: The category_permissions of this PlanetRole.  # noqa: E501
        :rtype: int
        """
        return self._category_permissions

    @category_permissions.setter
    def category_permissions(self, category_permissions):
        """Sets the category_permissions of this PlanetRole.


        :param category_permissions: The category_permissions of this PlanetRole.  # noqa: E501
        :type: int
        """

        self._category_permissions = category_permissions

    @property
    def voice_permissions(self):
        """Gets the voice_permissions of this PlanetRole.  # noqa: E501


        :return: The voice_permissions of this PlanetRole.  # noqa: E501
        :rtype: int
        """
        return self._voice_permissions

    @voice_permissions.setter
    def voice_permissions(self, voice_permissions):
        """Sets the voice_permissions of this PlanetRole.


        :param voice_permissions: The voice_permissions of this PlanetRole.  # noqa: E501
        :type: int
        """

        self._voice_permissions = voice_permissions

    @property
    def color(self):
        """Gets the color of this PlanetRole.  # noqa: E501


        :return: The color of this PlanetRole.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this PlanetRole.


        :param color: The color of this PlanetRole.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def bold(self):
        """Gets the bold of this PlanetRole.  # noqa: E501


        :return: The bold of this PlanetRole.  # noqa: E501
        :rtype: bool
        """
        return self._bold

    @bold.setter
    def bold(self, bold):
        """Sets the bold of this PlanetRole.


        :param bold: The bold of this PlanetRole.  # noqa: E501
        :type: bool
        """

        self._bold = bold

    @property
    def italics(self):
        """Gets the italics of this PlanetRole.  # noqa: E501


        :return: The italics of this PlanetRole.  # noqa: E501
        :rtype: bool
        """
        return self._italics

    @italics.setter
    def italics(self, italics):
        """Sets the italics of this PlanetRole.


        :param italics: The italics of this PlanetRole.  # noqa: E501
        :type: bool
        """

        self._italics = italics

    @property
    def name(self):
        """Gets the name of this PlanetRole.  # noqa: E501


        :return: The name of this PlanetRole.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PlanetRole.


        :param name: The name of this PlanetRole.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def anyone_can_mention(self):
        """Gets the anyone_can_mention of this PlanetRole.  # noqa: E501


        :return: The anyone_can_mention of this PlanetRole.  # noqa: E501
        :rtype: bool
        """
        return self._anyone_can_mention

    @anyone_can_mention.setter
    def anyone_can_mention(self, anyone_can_mention):
        """Sets the anyone_can_mention of this PlanetRole.


        :param anyone_can_mention: The anyone_can_mention of this PlanetRole.  # noqa: E501
        :type: bool
        """

        self._anyone_can_mention = anyone_can_mention

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlanetRole, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlanetRole):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
