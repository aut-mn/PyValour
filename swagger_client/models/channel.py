# coding: utf-8

"""
    Valour API

    The official Valour API  # noqa: E501

    OpenAPI spec version: v1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Channel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'members': 'list[ChannelMember]',
        'name': 'str',
        'description': 'str',
        'channel_type': 'ChannelTypeEnum',
        'last_update_time': 'datetime',
        'planet_id': 'int',
        'parent_id': 'int',
        'position': 'int',
        'inherits_perms': 'bool',
        'is_default': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'members': 'members',
        'name': 'name',
        'description': 'description',
        'channel_type': 'channelType',
        'last_update_time': 'lastUpdateTime',
        'planet_id': 'planetId',
        'parent_id': 'parentId',
        'position': 'position',
        'inherits_perms': 'inheritsPerms',
        'is_default': 'isDefault'
    }

    def __init__(self, id=None, members=None, name=None, description=None, channel_type=None, last_update_time=None, planet_id=None, parent_id=None, position=None, inherits_perms=None, is_default=None):  # noqa: E501
        """Channel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._members = None
        self._name = None
        self._description = None
        self._channel_type = None
        self._last_update_time = None
        self._planet_id = None
        self._parent_id = None
        self._position = None
        self._inherits_perms = None
        self._is_default = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if members is not None:
            self.members = members
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if channel_type is not None:
            self.channel_type = channel_type
        if last_update_time is not None:
            self.last_update_time = last_update_time
        if planet_id is not None:
            self.planet_id = planet_id
        if parent_id is not None:
            self.parent_id = parent_id
        if position is not None:
            self.position = position
        if inherits_perms is not None:
            self.inherits_perms = inherits_perms
        if is_default is not None:
            self.is_default = is_default

    @property
    def id(self):
        """Gets the id of this Channel.  # noqa: E501


        :return: The id of this Channel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Channel.


        :param id: The id of this Channel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def members(self):
        """Gets the members of this Channel.  # noqa: E501


        :return: The members of this Channel.  # noqa: E501
        :rtype: list[ChannelMember]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this Channel.


        :param members: The members of this Channel.  # noqa: E501
        :type: list[ChannelMember]
        """

        self._members = members

    @property
    def name(self):
        """Gets the name of this Channel.  # noqa: E501


        :return: The name of this Channel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Channel.


        :param name: The name of this Channel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Channel.  # noqa: E501


        :return: The description of this Channel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Channel.


        :param description: The description of this Channel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def channel_type(self):
        """Gets the channel_type of this Channel.  # noqa: E501


        :return: The channel_type of this Channel.  # noqa: E501
        :rtype: ChannelTypeEnum
        """
        return self._channel_type

    @channel_type.setter
    def channel_type(self, channel_type):
        """Sets the channel_type of this Channel.


        :param channel_type: The channel_type of this Channel.  # noqa: E501
        :type: ChannelTypeEnum
        """

        self._channel_type = channel_type

    @property
    def last_update_time(self):
        """Gets the last_update_time of this Channel.  # noqa: E501


        :return: The last_update_time of this Channel.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update_time

    @last_update_time.setter
    def last_update_time(self, last_update_time):
        """Sets the last_update_time of this Channel.


        :param last_update_time: The last_update_time of this Channel.  # noqa: E501
        :type: datetime
        """

        self._last_update_time = last_update_time

    @property
    def planet_id(self):
        """Gets the planet_id of this Channel.  # noqa: E501


        :return: The planet_id of this Channel.  # noqa: E501
        :rtype: int
        """
        return self._planet_id

    @planet_id.setter
    def planet_id(self, planet_id):
        """Sets the planet_id of this Channel.


        :param planet_id: The planet_id of this Channel.  # noqa: E501
        :type: int
        """

        self._planet_id = planet_id

    @property
    def parent_id(self):
        """Gets the parent_id of this Channel.  # noqa: E501


        :return: The parent_id of this Channel.  # noqa: E501
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this Channel.


        :param parent_id: The parent_id of this Channel.  # noqa: E501
        :type: int
        """

        self._parent_id = parent_id

    @property
    def position(self):
        """Gets the position of this Channel.  # noqa: E501


        :return: The position of this Channel.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this Channel.


        :param position: The position of this Channel.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def inherits_perms(self):
        """Gets the inherits_perms of this Channel.  # noqa: E501


        :return: The inherits_perms of this Channel.  # noqa: E501
        :rtype: bool
        """
        return self._inherits_perms

    @inherits_perms.setter
    def inherits_perms(self, inherits_perms):
        """Sets the inherits_perms of this Channel.


        :param inherits_perms: The inherits_perms of this Channel.  # noqa: E501
        :type: bool
        """

        self._inherits_perms = inherits_perms

    @property
    def is_default(self):
        """Gets the is_default of this Channel.  # noqa: E501


        :return: The is_default of this Channel.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this Channel.


        :param is_default: The is_default of this Channel.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Channel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Channel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
