# coding: utf-8

"""
    Valour API

    The official Valour API  # noqa: E501

    OpenAPI spec version: v1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Message(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'reply_to': 'Message',
        'planet_id': 'int',
        'reply_to_id': 'int',
        'author_user_id': 'int',
        'author_member_id': 'int',
        'content': 'str',
        'time_sent': 'datetime',
        'channel_id': 'int',
        'embed_data': 'str',
        'mentions_data': 'str',
        'attachments_data': 'str',
        'edited_time': 'datetime',
        'fingerprint': 'str'
    }

    attribute_map = {
        'id': 'id',
        'reply_to': 'replyTo',
        'planet_id': 'planetId',
        'reply_to_id': 'replyToId',
        'author_user_id': 'authorUserId',
        'author_member_id': 'authorMemberId',
        'content': 'content',
        'time_sent': 'timeSent',
        'channel_id': 'channelId',
        'embed_data': 'embedData',
        'mentions_data': 'mentionsData',
        'attachments_data': 'attachmentsData',
        'edited_time': 'editedTime',
        'fingerprint': 'fingerprint'
    }

    def __init__(self, id=None, reply_to=None, planet_id=None, reply_to_id=None, author_user_id=None, author_member_id=None, content=None, time_sent=None, channel_id=None, embed_data=None, mentions_data=None, attachments_data=None, edited_time=None, fingerprint=None):  # noqa: E501
        """Message - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._reply_to = None
        self._planet_id = None
        self._reply_to_id = None
        self._author_user_id = None
        self._author_member_id = None
        self._content = None
        self._time_sent = None
        self._channel_id = None
        self._embed_data = None
        self._mentions_data = None
        self._attachments_data = None
        self._edited_time = None
        self._fingerprint = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if reply_to is not None:
            self.reply_to = reply_to
        if planet_id is not None:
            self.planet_id = planet_id
        if reply_to_id is not None:
            self.reply_to_id = reply_to_id
        if author_user_id is not None:
            self.author_user_id = author_user_id
        if author_member_id is not None:
            self.author_member_id = author_member_id
        if content is not None:
            self.content = content
        if time_sent is not None:
            self.time_sent = time_sent
        if channel_id is not None:
            self.channel_id = channel_id
        if embed_data is not None:
            self.embed_data = embed_data
        if mentions_data is not None:
            self.mentions_data = mentions_data
        if attachments_data is not None:
            self.attachments_data = attachments_data
        if edited_time is not None:
            self.edited_time = edited_time
        if fingerprint is not None:
            self.fingerprint = fingerprint

    @property
    def id(self):
        """Gets the id of this Message.  # noqa: E501


        :return: The id of this Message.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Message.


        :param id: The id of this Message.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def reply_to(self):
        """Gets the reply_to of this Message.  # noqa: E501


        :return: The reply_to of this Message.  # noqa: E501
        :rtype: Message
        """
        return self._reply_to

    @reply_to.setter
    def reply_to(self, reply_to):
        """Sets the reply_to of this Message.


        :param reply_to: The reply_to of this Message.  # noqa: E501
        :type: Message
        """

        self._reply_to = reply_to

    @property
    def planet_id(self):
        """Gets the planet_id of this Message.  # noqa: E501


        :return: The planet_id of this Message.  # noqa: E501
        :rtype: int
        """
        return self._planet_id

    @planet_id.setter
    def planet_id(self, planet_id):
        """Sets the planet_id of this Message.


        :param planet_id: The planet_id of this Message.  # noqa: E501
        :type: int
        """

        self._planet_id = planet_id

    @property
    def reply_to_id(self):
        """Gets the reply_to_id of this Message.  # noqa: E501


        :return: The reply_to_id of this Message.  # noqa: E501
        :rtype: int
        """
        return self._reply_to_id

    @reply_to_id.setter
    def reply_to_id(self, reply_to_id):
        """Sets the reply_to_id of this Message.


        :param reply_to_id: The reply_to_id of this Message.  # noqa: E501
        :type: int
        """

        self._reply_to_id = reply_to_id

    @property
    def author_user_id(self):
        """Gets the author_user_id of this Message.  # noqa: E501


        :return: The author_user_id of this Message.  # noqa: E501
        :rtype: int
        """
        return self._author_user_id

    @author_user_id.setter
    def author_user_id(self, author_user_id):
        """Sets the author_user_id of this Message.


        :param author_user_id: The author_user_id of this Message.  # noqa: E501
        :type: int
        """

        self._author_user_id = author_user_id

    @property
    def author_member_id(self):
        """Gets the author_member_id of this Message.  # noqa: E501


        :return: The author_member_id of this Message.  # noqa: E501
        :rtype: int
        """
        return self._author_member_id

    @author_member_id.setter
    def author_member_id(self, author_member_id):
        """Sets the author_member_id of this Message.


        :param author_member_id: The author_member_id of this Message.  # noqa: E501
        :type: int
        """

        self._author_member_id = author_member_id

    @property
    def content(self):
        """Gets the content of this Message.  # noqa: E501


        :return: The content of this Message.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Message.


        :param content: The content of this Message.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def time_sent(self):
        """Gets the time_sent of this Message.  # noqa: E501


        :return: The time_sent of this Message.  # noqa: E501
        :rtype: datetime
        """
        return self._time_sent

    @time_sent.setter
    def time_sent(self, time_sent):
        """Sets the time_sent of this Message.


        :param time_sent: The time_sent of this Message.  # noqa: E501
        :type: datetime
        """

        self._time_sent = time_sent

    @property
    def channel_id(self):
        """Gets the channel_id of this Message.  # noqa: E501


        :return: The channel_id of this Message.  # noqa: E501
        :rtype: int
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this Message.


        :param channel_id: The channel_id of this Message.  # noqa: E501
        :type: int
        """

        self._channel_id = channel_id

    @property
    def embed_data(self):
        """Gets the embed_data of this Message.  # noqa: E501


        :return: The embed_data of this Message.  # noqa: E501
        :rtype: str
        """
        return self._embed_data

    @embed_data.setter
    def embed_data(self, embed_data):
        """Sets the embed_data of this Message.


        :param embed_data: The embed_data of this Message.  # noqa: E501
        :type: str
        """

        self._embed_data = embed_data

    @property
    def mentions_data(self):
        """Gets the mentions_data of this Message.  # noqa: E501


        :return: The mentions_data of this Message.  # noqa: E501
        :rtype: str
        """
        return self._mentions_data

    @mentions_data.setter
    def mentions_data(self, mentions_data):
        """Sets the mentions_data of this Message.


        :param mentions_data: The mentions_data of this Message.  # noqa: E501
        :type: str
        """

        self._mentions_data = mentions_data

    @property
    def attachments_data(self):
        """Gets the attachments_data of this Message.  # noqa: E501


        :return: The attachments_data of this Message.  # noqa: E501
        :rtype: str
        """
        return self._attachments_data

    @attachments_data.setter
    def attachments_data(self, attachments_data):
        """Sets the attachments_data of this Message.


        :param attachments_data: The attachments_data of this Message.  # noqa: E501
        :type: str
        """

        self._attachments_data = attachments_data

    @property
    def edited_time(self):
        """Gets the edited_time of this Message.  # noqa: E501


        :return: The edited_time of this Message.  # noqa: E501
        :rtype: datetime
        """
        return self._edited_time

    @edited_time.setter
    def edited_time(self, edited_time):
        """Sets the edited_time of this Message.


        :param edited_time: The edited_time of this Message.  # noqa: E501
        :type: datetime
        """

        self._edited_time = edited_time

    @property
    def fingerprint(self):
        """Gets the fingerprint of this Message.  # noqa: E501


        :return: The fingerprint of this Message.  # noqa: E501
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this Message.


        :param fingerprint: The fingerprint of this Message.  # noqa: E501
        :type: str
        """

        self._fingerprint = fingerprint

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Message, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Message):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
