# coding: utf-8

"""
    Valour API

    The official Valour API  # noqa: E501

    OpenAPI spec version: v1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'pfp_url': 'str',
        'time_joined': 'datetime',
        'name': 'str',
        'tag': 'str',
        'bot': 'bool',
        'disabled': 'bool',
        'valour_staff': 'bool',
        'status': 'str',
        'user_state_code': 'int',
        'time_last_active': 'datetime',
        'is_mobile': 'bool',
        'compliance': 'bool',
        'subscription_type': 'str'
    }

    attribute_map = {
        'id': 'id',
        'pfp_url': 'pfpUrl',
        'time_joined': 'timeJoined',
        'name': 'name',
        'tag': 'tag',
        'bot': 'bot',
        'disabled': 'disabled',
        'valour_staff': 'valourStaff',
        'status': 'status',
        'user_state_code': 'userStateCode',
        'time_last_active': 'timeLastActive',
        'is_mobile': 'isMobile',
        'compliance': 'compliance',
        'subscription_type': 'subscriptionType'
    }

    def __init__(self, id=None, pfp_url=None, time_joined=None, name=None, tag=None, bot=None, disabled=None, valour_staff=None, status=None, user_state_code=None, time_last_active=None, is_mobile=None, compliance=None, subscription_type=None):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._pfp_url = None
        self._time_joined = None
        self._name = None
        self._tag = None
        self._bot = None
        self._disabled = None
        self._valour_staff = None
        self._status = None
        self._user_state_code = None
        self._time_last_active = None
        self._is_mobile = None
        self._compliance = None
        self._subscription_type = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if pfp_url is not None:
            self.pfp_url = pfp_url
        if time_joined is not None:
            self.time_joined = time_joined
        if name is not None:
            self.name = name
        if tag is not None:
            self.tag = tag
        if bot is not None:
            self.bot = bot
        if disabled is not None:
            self.disabled = disabled
        if valour_staff is not None:
            self.valour_staff = valour_staff
        if status is not None:
            self.status = status
        if user_state_code is not None:
            self.user_state_code = user_state_code
        if time_last_active is not None:
            self.time_last_active = time_last_active
        if is_mobile is not None:
            self.is_mobile = is_mobile
        if compliance is not None:
            self.compliance = compliance
        if subscription_type is not None:
            self.subscription_type = subscription_type

    @property
    def id(self):
        """Gets the id of this User.  # noqa: E501


        :return: The id of this User.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.


        :param id: The id of this User.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def pfp_url(self):
        """Gets the pfp_url of this User.  # noqa: E501


        :return: The pfp_url of this User.  # noqa: E501
        :rtype: str
        """
        return self._pfp_url

    @pfp_url.setter
    def pfp_url(self, pfp_url):
        """Sets the pfp_url of this User.


        :param pfp_url: The pfp_url of this User.  # noqa: E501
        :type: str
        """

        self._pfp_url = pfp_url

    @property
    def time_joined(self):
        """Gets the time_joined of this User.  # noqa: E501


        :return: The time_joined of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._time_joined

    @time_joined.setter
    def time_joined(self, time_joined):
        """Sets the time_joined of this User.


        :param time_joined: The time_joined of this User.  # noqa: E501
        :type: datetime
        """

        self._time_joined = time_joined

    @property
    def name(self):
        """Gets the name of this User.  # noqa: E501


        :return: The name of this User.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.


        :param name: The name of this User.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def tag(self):
        """Gets the tag of this User.  # noqa: E501


        :return: The tag of this User.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this User.


        :param tag: The tag of this User.  # noqa: E501
        :type: str
        """

        self._tag = tag

    @property
    def bot(self):
        """Gets the bot of this User.  # noqa: E501


        :return: The bot of this User.  # noqa: E501
        :rtype: bool
        """
        return self._bot

    @bot.setter
    def bot(self, bot):
        """Sets the bot of this User.


        :param bot: The bot of this User.  # noqa: E501
        :type: bool
        """

        self._bot = bot

    @property
    def disabled(self):
        """Gets the disabled of this User.  # noqa: E501


        :return: The disabled of this User.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this User.


        :param disabled: The disabled of this User.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def valour_staff(self):
        """Gets the valour_staff of this User.  # noqa: E501


        :return: The valour_staff of this User.  # noqa: E501
        :rtype: bool
        """
        return self._valour_staff

    @valour_staff.setter
    def valour_staff(self, valour_staff):
        """Sets the valour_staff of this User.


        :param valour_staff: The valour_staff of this User.  # noqa: E501
        :type: bool
        """

        self._valour_staff = valour_staff

    @property
    def status(self):
        """Gets the status of this User.  # noqa: E501


        :return: The status of this User.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this User.


        :param status: The status of this User.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def user_state_code(self):
        """Gets the user_state_code of this User.  # noqa: E501


        :return: The user_state_code of this User.  # noqa: E501
        :rtype: int
        """
        return self._user_state_code

    @user_state_code.setter
    def user_state_code(self, user_state_code):
        """Sets the user_state_code of this User.


        :param user_state_code: The user_state_code of this User.  # noqa: E501
        :type: int
        """

        self._user_state_code = user_state_code

    @property
    def time_last_active(self):
        """Gets the time_last_active of this User.  # noqa: E501


        :return: The time_last_active of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._time_last_active

    @time_last_active.setter
    def time_last_active(self, time_last_active):
        """Sets the time_last_active of this User.


        :param time_last_active: The time_last_active of this User.  # noqa: E501
        :type: datetime
        """

        self._time_last_active = time_last_active

    @property
    def is_mobile(self):
        """Gets the is_mobile of this User.  # noqa: E501


        :return: The is_mobile of this User.  # noqa: E501
        :rtype: bool
        """
        return self._is_mobile

    @is_mobile.setter
    def is_mobile(self, is_mobile):
        """Sets the is_mobile of this User.


        :param is_mobile: The is_mobile of this User.  # noqa: E501
        :type: bool
        """

        self._is_mobile = is_mobile

    @property
    def compliance(self):
        """Gets the compliance of this User.  # noqa: E501


        :return: The compliance of this User.  # noqa: E501
        :rtype: bool
        """
        return self._compliance

    @compliance.setter
    def compliance(self, compliance):
        """Sets the compliance of this User.


        :param compliance: The compliance of this User.  # noqa: E501
        :type: bool
        """

        self._compliance = compliance

    @property
    def subscription_type(self):
        """Gets the subscription_type of this User.  # noqa: E501


        :return: The subscription_type of this User.  # noqa: E501
        :rtype: str
        """
        return self._subscription_type

    @subscription_type.setter
    def subscription_type(self, subscription_type):
        """Sets the subscription_type of this User.


        :param subscription_type: The subscription_type of this User.  # noqa: E501
        :type: str
        """

        self._subscription_type = subscription_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
